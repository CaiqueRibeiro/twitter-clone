// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Tweet {
  id                String      @id @default(uuid())
  content           String
  active            Boolean
  author_id         String
  user              User        @relation(fields: [author_id], references: [id])
  referred_tweet_id String?
  referred_tweet    Tweet?      @relation("retweet", fields: [referred_tweet_id], references: [id])
  retweets          Tweet[]     @relation("retweet")
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt
  feed_tweets       FeedTweet[]
  Like              Like[]
  Reply             Reply[]

  @@map("tweets")
}

model Like {
  tweet     Tweet    @relation(fields: [tweet_id], references: [id])
  tweet_id  String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  timestamp DateTime @default(now())

  @@id([tweet_id, user_id])
  @@map("likes")
}

model Reply {
  tweet     Tweet    @relation(fields: [tweet_id], references: [id])
  tweet_id  String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  content   String?
  timestamp DateTime @default(now())

  @@id([tweet_id, user_id])
  @@map("replies")
}

model User {
  id            String     @id @default(uuid())
  email         String     @unique
  username      String     @unique
  profile_image String?
  tweets        Tweet[]
  followers     Follower[] @relation("follower")
  followees     Follower[] @relation("followee")
  feeds         Feed[]
  Like          Like[]
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  Reply         Reply[]

  @@map("users")
}

model Follower {
  follower_id String
  follower    User     @relation("follower", fields: [follower_id], references: [id])
  followee_id String
  followee    User     @relation("followee", fields: [followee_id], references: [id])
  timestamp   DateTime @default(now())

  @@id([follower_id, followee_id])
  @@map("followers")
}

model Feed {
  id          String      @id @default(uuid())
  user_id     String      @unique
  user        User        @relation(fields: [user_id], references: [id])
  updated_at  DateTime    @updatedAt
  feed_tweets FeedTweet[]

  @@map("feeds")
}

model FeedTweet {
  tweet    Tweet  @relation(fields: [tweet_id], references: [id])
  tweet_id String
  feed     Feed   @relation(fields: [feed_id], references: [id])
  feed_id  String

  @@id([tweet_id, feed_id])
  @@map("feed_tweets")
}
